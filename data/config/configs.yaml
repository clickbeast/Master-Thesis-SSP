---
root_path: "/Users/simonvermeir/Documents/industrial-engineering/SchoolCurrent/MasterProef/Master-Thesis-SSP"
files: 'mixed_files.json' #filename of file containing instances to be run
runs: 5  #int; amount of runs of each instance
params:
  - run_type: 'RR-A'               #name of the run , configured with the paramaters below
    run: 0                    #(0); indicates which run it is
    root_folder: ''           #(empty); indicates the folder of the instance, containing the problem and aux file.
    run_time: '420'           #int; seconds; max run time
    seed: '7'                 #int; seed of random generator

    #
    # General
    #

    constructive_heuristic: ordered    #(ordered, toolSequencing, random)
    local_search: ruinAndRecreate     #(ruinAndRecreate, swaps)
    meta_heuristic: steepestDescentBestRandom #(steepestDescentBestRandom, steepestDescentBestFirst, simulatedAnnealing, hillClimbing, permutations)
    objective: switches              #(switches, tieBreaking, toolDistance, toolHops); the objective function needed to be used

    #
    # Ruin and Recreate
    #

    blink_rate: 0.01                  #(double);
    avg_ruin: 10                      #(int); max allowed ruined solutions
    select: randomTool                #(randomTool, randomJob, mostHops, mostHopsRoulette);
    match: required                   #(requiredTool, ktnsTool, notRequiredTool, hopCreator)
    insert:                       #(best); where to insert the removed jobs
    insert_positions: all             #(all, removed); insert at all possible positions, or only in the removed positions
    decode: full                      #(full, shallow, hybrid); rank insert position quality with a full decode, shallow or hybrid (Depending if there are a lot of ktns tools that can be added)


    #
    # Decoding
    #

    version: 'default'              #(groundTruth: Original Tang and Denaro, v1: Naive version, v2: Preprocessing , v3: delta evaluation)


    #
    # Performance
    #

    parrallel: false               #(bool); run parrallel ; (during decode, ...)


    #
    # Objective: Tool Distance
    #

    w_s: 0                           #(double); weight switches
    w_dist: 1                        #(double); weight total distance
    w_dist_min: 1                    #(double); weight distance minimized distance(tools that are present)
    w_dist_max: 1                    #(double); weight distance maximized distance(tools that are not present)


    #
    # Objective: Tool Hops
    #

    ##TODO


    #
    # Simulated Annealing
    #


    start_temp: '100'               #double; start temperature
    end_temp: '0.00097'             #double; end temperature
    sa_timed: false                 #double;
    decay_rate: -1                  #(double,-1: auto generate); the decay rate,
    iterations: -1                  #(int,-1: auto generate); number of iterations


    force_iterations: true         #(bool); use hardcoded iterations function;
    force_alpha: false             #(bool); use hardcoded alpha function; works only if force iterations set to false

    alpha: -1                      #(double,-1: auto generate); al
    beta: 0                        #(double,-1: auto generate);

    w_iterations:                  #(double); weight on iterations
    w_alpha: 1                     #(double); weight on alpha



    w_jobs: 1                      #(double;  weight on number of jobs
    w_tools: 1                     #(double); weight on number of tools
    w_mag: 1                       #(double); weight on magazine size


    #
    # Logging
    #

    log: true                      #(bool); write logs in general
    log_verbose: true              #(bool); write logs to stdout
    write_results: true            #(bool); write results to file
    live_result: false             #(bool); transmit live results

    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  - run_type:                 #name of the run , configured with the paramaters below
    run: 0                    #(0); indicates which run it is
    root_folder: ''           #(empty); indicates the folder of the instance, containing the problem and aux file.
    run_time: '420'           #int; seconds; max run time
    seed: '7'                 #int; seed of random generator

    #
    # General
    #

    constructive_heuristic: ordered    #(ordered, toolSequencing, random)
    local_search: ruinAndRecreate     #(ruinAndRecreate, swaps)
    meta_heuristic: steepestDescentBestRandom #(steepestDescentBestRandom, steepestDescentBestFirst, simulatedAnnealing, hillClimbing, permutations)
    objective: switches              #(switches, tieBreaking, toolDistance, toolHops); the objective function needed to be used

    #
    # Ruin and Recreate
    #

    blink_rate: 0.01                  #(double);
    avg_ruin: 10                      #(int); max allowed ruined solutions
    select: randomTool                #(randomTool, randomJob, mostHops, mostHopsRoulette);
    match: required                   #(requiredTool, ktnsTool, notRequiredTool, hopCreator)
    insert: best                      #(best); where to insert the removed jobs
    insert_positions: all             #(all, removed); insert at all possible positions, or only in the removed positions
    decode: full                      #(full, shallow, hybrid); rank insert position quality with a full decode, shallow or hybrid (Depending if there are a lot of ktns tools that can be added)


    #
    # Decoding
    #

    version: 'default'              #(groundTruth: Original Tang and Denaro, v1: Naive version, v2: Preprocessing , v3: delta evaluation)


    #
    # Performance
    #

    parrallel: false               #(bool); run parrallel ; (during decode, ...)


    #
    # Objective: Tool Distance
    #

    w_s: 0                           #(double); weight switches
    w_dist: 1                        #(double); weight total distance
    w_dist_min: 1                    #(double); weight distance minimized distance(tools that are present)
    w_dist_max: 1                    #(double); weight distance maximized distance(tools that are not present)


    #
    # Objective: Tool Hops
    #

    ##TODO


    #
    # Simulated Annealing
    #


    start_temp: '100'               #double; start temperature
    end_temp: '0.00097'             #double; end temperature
    sa_timed: false                 #double;
    decay_rate: -1                  #(double,-1: auto generate); the decay rate,
    iterations: -1                  #(int,-1: auto generate); number of iterations


    force_iterations: true         #(bool); use hardcoded iterations function;
    force_alpha: false             #(bool); use hardcoded alpha function; works only if force iterations set to false

    alpha: -1                      #(double,-1: auto generate);
    beta: 0                        #(double,-1: auto generate);

    w_iterations:                  #(double); weight on iterations
    w_alpha: 1                     #(double); weight on alpha



    w_jobs: 1                      #(double;  weight on number of jobs
    w_tools: 1                     #(double); weight on number of tools
    w_mag: 1                       #(double); weight on magazine size


    #
    # Logging
    #

    log: true                      #(bool); write logs in general
    log_verbose: true              #(bool); write logs to stdout
    write_results: true            #(bool); write results to file
    live_result: false             #(bool); transmit live results



    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

