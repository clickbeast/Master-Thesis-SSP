---
root_path: "/Users/simonvermeir/Documents/industrial-engineering/SchoolCurrent/MasterProef/Master-Thesis-SSP"
files: 'mixed_files.json' #filename of file containing instances to be run
runs: 1  #int; amount of runs of each instance
parallel: True      #(bool); run instances parallel
background: False    #(bool); run everything as a background task; only applicable when running parallel
multi: True         #(bool); run multiple params versions
use_runs: True      #(bool); run each instance multiple times
jobs: 8             #(int); how many jobs need to be run in parrallel; only applicable when running parallel
use_filter: false   #(bool); only use the instances that match the filter
open_results: true #(bool); calculate the results of the runs and open after running

filter:
    author: 'cat'
    n_jobs: 10
    n_tools: 10
    magazine_size: 4
    variation: 1

params:

    #
    # General: run info
    #

    - run_type: RANDOM-SD          #name of the run , configured with the paramaters below
      run: 0                    #(0); indicates which run it is
      root_folder: ''           #(empty); indicates the folder of the author, containing the problem and aux file.
      instance: ''              #(empty); indicates the instance being used

      #
      # General: parameters
      #

      run_time: 420             #int; seconds; max run time
      seed: 7                   #int; seed of random generator

      #
      # General: Method
      #

      constructive_heuristic: random    #(ordered, toolSequencing, random)
      local_search: ruinAndRecreate     #(ruinAndRecreate, swaps)
      meta_heuristic: steepestDescentBestRandom #(steepestDescentBestRandom, steepestDescentBestFirst, simulatedAnnealing, hillClimbing, permutations, forceSequence, multiForceSequence)
      objective: switches              #(switches, tieBreaking, toolDistance, toolHops); the objective function needed to be used


      #
      # Ruin and Recreate
      #

      blink_rate: 0.01                  #(double);
      avg_ruin: 10                      #(int); max allowed ruined solutions
      select: randomTool                #(randomTool, randomJob, mostHops, mostHopsRoulette);
      match: requiredTool                   #(requiredTool, ktnsTool, notRequiredTool, hopCreator)
      insert: best                       #(best); where to insert the removed jobs
      filter: random                     #(random, worst); when making a choice how many to remove, which ones to keep
      insert_positions: all             #(all, removed); insert at all possible positions, or only in the removed positions
      decode: full                      #(full, shallow, hybrid); rank insert position quality with a full decode, shallow or hybrid (Depending if there are a lot of ktns tools that can be added)


      #
      # Decoding
      #

      decode_version: 'default'              #(groundTruth: Original Tang and Denaro, v1: Naive version, v2: Preprocessing , v3: delta evaluation)


      #
      # Performance
      #

      parallel: false               #(bool); run parrallel ; (during decode, ...)


      #
      # Objective: Tool Distance
      #

      w_s: 0                           #(double); weight switches
      w_dist: 1                        #(double); weight total distance
      w_dist_min: 1                    #(double); weight distance minimized distance(tools that are present)
      w_dist_max: 1                    #(double); weight distance maximized distance(tools that are not present)


      #
      # Objective: Tool Hops
      #

      ##TODO


      #
      # Simulated Annealing
      #


      start_temp: '100'               #double; start temperature
      end_temp: '0.00097'             #double; end temperature
      sa_timed: false                 #double;
      decay_rate: -1                  #(double,-1: auto generate); the decay rate,
      iterations: -1                  #(int,-1: auto generate); number of iterations


      force_iterations: true         #(bool); use hardcoded iterations function;
      force_alpha: false             #(bool); use hardcoded alpha function; works only if force iterations set to false

      alpha: -1                      #(double,-1: auto generate); al
      beta: 0                        #(double,-1: auto generate);

      w_iterations: 1                 #(double); weight on iterations
      w_alpha: 1                     #(double); weight on alpha



      w_jobs: 1                      #(double;  weight on number of jobs
      w_tools: 1                     #(double); weight on number of tools
      w_mag: 1                       #(double); weight on magazine size


      #
      # Logging

      log: false                      #(bool); write logs in general
      log_verbose: false              #(bool); write logs to stdout
      write_results: false            #(bool); write results to file
      live_result: false             #(bool); transmit live results

      # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

    - run_type: ORDERED-SD
      constructive_heuristic: ordered    #(ordered, toolSequencing, random)
    - run_type: TOOLSEQ-SD
      constructive_heuristic: toolSequencing